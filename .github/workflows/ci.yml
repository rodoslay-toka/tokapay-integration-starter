name: CI
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Node dependencies
        run: pnpm install

      - name: Lint Node.js
        run: pnpm exec eslint . --ext .ts --ignore-path .gitignore || true # Allow failure if no config

      - name: Node.js Test (Signing check)
        run: |
          pnpm ts-node -e '
          import { signRequest } from "./lib/node/signing.js";
          import crypto from "crypto";

          const { privateKey, publicKey } = crypto.generateKeyPairSync("rsa", {
            modulusLength: 2048,
            publicKeyEncoding: { type: "spki", format: "pem" },
            privateKeyEncoding: { type: "pkcs8", format: "pem" },
          });

          const content = "POST./v1/test.client1.req1.12345.{}";
          const signatureHeader = signRequest({
            method: "POST",
            path: "/v1/test",
            clientId: "client1",
            requestId: "req1",
            requestTimeMs: "12345",
            bodyJson: "{}",
            privateKeyPem: privateKey,
            keyVersion: "1"
          });

          const signature = signatureHeader.split("signature=")[1];
          const verifier = crypto.createVerify("RSA-SHA256");
          verifier.update(Buffer.from(content, "utf8"));
          const isValid = verifier.verify(publicKey, Buffer.from(decodeURIComponent(signature), "base64"));
          
          if (isValid) {
            console.log("Node.js signature round-trip test PASSED");
          } else {
            console.error("Node.js signature round-trip test FAILED");
            process.exit(1);
          }
          '

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Lint Python
        run: python -m ruff check . || true # Allow failure if no config

      - name: Python Test (Signing check)
        run: |
          python -c '
          from lib.python.signing import sign_request, _b64url
          from cryptography.hazmat.primitives import serialization, hashes
          from cryptography.hazmat.primitives.asymmetric import rsa, padding
          import base64
          from urllib.parse import unquote

          private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
          private_pem = private_key.private_bytes(
              encoding=serialization.Encoding.PEM,
              format=serialization.PrivateFormat.PKCS8,
              encryption_algorithm=serialization.NoEncryption()
          ).decode("utf-8")
          public_key = private_key.public_key()

          content = "POST./v1/test.client1.req1.12345.{}"
          signature_header = sign_request("POST", "/v1/test", "client1", "req1", "12345", "{}", private_pem, "1")
          
          signature_b64url = unquote(signature_header.split("signature=")[1])
          signature_bytes = base64.urlsafe_b64decode(signature_b64url + "==")

          try:
              public_key.verify(
                  signature_bytes,
                  content.encode("utf-8"),
                  padding.PKCS1v15(),
                  hashes.SHA256()
              )
              print("Python signature round-trip test PASSED")
          except Exception as e:
              print(f"Python signature round-trip test FAILED: {e}")
              exit(1)
          '

      - name: Secret Scan
        uses: zricethezav/gitleaks-action@v2
        with:
          args: "--no-banner -v"
